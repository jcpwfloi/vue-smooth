'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var debug = _interopDefault(require('debug'));
var mongoose = _interopDefault(require('mongoose'));

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

















var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};

var log = debug('smooth:log');
var Schema = mongoose.Schema;

var ensure = function ensure(data, errMessage) {
  if (!data) throw new Error(errMessage);
};

var Smooth = function () {
  function Smooth(schema, options) {
    classCallCheck(this, Smooth);

    /*
     * Constructor of Smooth Object
     * @param{JSON} schema Mongoose Schema of the Object
     * @param{JSON} options Options provided by user
     *  @param{JSON} privilege
     *    @param{Function} C
     *    @param{Function} R
     *    @param{Function} U
     *    @param{Function} D
     */
    log('Dealing with schema ' + schema + '\nOptions: ' + options);

    this.options = {
      privilege: {
        C: function C() {
          return true;
        },
        R: function R() {
          return true;
        },
        U: function U() {
          return true;
        },
        D: function D() {
          return true;
        }
      }
    };

    for (var key in options) {
      this.options[key] = options[key];
    }

    ensure(this.options.mongooseAddr, 'ENOADDR');
    ensure(this.options.name, 'ENONAME');

    mongoose.connect(this.options.mongooseAddr);

    this.schema = new Schema(schema);
    log('Registering Mongoose model ' + this.options.name + ', schema: ' + JSON.stringify(this.schema));
    this.Mongoose = mongoose.model(this.options.name, this.schema);
  }

  createClass(Smooth, [{
    key: 'register',
    value: function register(app, path) {
      /*
       * Register function
       * @param{Express App} app Express App for binding usage
       * @param{String} path Prefix path for routing
       */
      log('Registering smooth Object to ' + path);

      app.post(path + '/get', this.routerGet.bind(this));
      app.post(path + '/getOne', this.routerGetOne.bind(this));
      app.post(path + '/remove', this.routerRemove.bind(this));
      app.post(path + '/update', this.routerUpdate.bind(this));
      app.post(path + '/add', this.routerAdd.bind(this));
    }
  }, {
    key: 'checkPrivilege',
    value: function checkPrivilege(priv, req) {
      log('Checking "' + priv + '" privilege.');
      log('Result: ' + this.options.privilege[priv](req));
      return this.options.privilege[priv](req);
    }
  }, {
    key: 'routerGet',
    value: function routerGet(req, res) {
      var _this = this;

      /*
       * Read support for CRUD
       * @param{Express Request} req
       * @param{Express Response} res
       */
      if (!this.checkPrivilege('R', req)) {
        return;
      }

      this.Mongoose.find({}, function (err, doc) {
        _this.result(doc, req, res);
      });
    }
  }, {
    key: 'routerGetOne',
    value: function routerGetOne(req, res) {
      var _this2 = this;

      /*
       * ReadOne support for CRUD
       * @param{Express Request} req
       * @param{Express Response} res
       */
      if (!this.checkPrivilege('R', req)) {
        return;
      }

      this.Mongoose.findOne({ _id: req.body._id }, function (err, doc) {
        _this2.result(doc, req, res);
      });
    }
  }, {
    key: 'routerRemove',
    value: function routerRemove(req, res) {
      var _this3 = this;

      /*
       * Delete support for CRUD
       * @param{Express Request} req
       * @param{Express Response} res
       */
      if (!this.checkPrivilege('D', req)) {
        return;
      }

      this.Mongoose.remove({ _id: req.body._id }, function (err, doc) {
        _this3.result(doc, req, res);
      });
    }
  }, {
    key: 'routerUpdate',
    value: function routerUpdate(req, res) {
      var _this4 = this;

      /*
       * Update support for CRUD
       * @param{Express Request} req
       * @param{Express Response} res
       */
      if (!this.checkPrivilege('U', req)) {
        return;
      }

      this.Mongoose.update({ _id: req.body._id }, req.body.upd, function (err, doc) {
        _this4.result(doc, req, res);
      });
    }
  }, {
    key: 'routerAdd',
    value: function routerAdd(req, res) {
      var _this5 = this;

      /*
       * Add support for CRUD
       * @param{Express Request} req
       * @param{Express Response} res
       */
      log('Adding data ' + JSON.stringify(req.body) + ' to the schema');

      if (!this.checkPrivilege('C', req)) {
        return;
      }

      log('Privilege check passed');

      var data = new this.Mongoose(req.body);

      log('parsed data: ' + JSON.stringify(data));

      data.save(function (doc) {
        _this5.result(doc, req, res);
      });
    }
  }, {
    key: 'result',
    value: function result(doc, req, res) {
      res.json(doc);
    }
  }]);
  return Smooth;
}();

module.exports = Smooth;
